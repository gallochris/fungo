format = colFormat(separators = TRUE)
),
Wager = colDef(
name = "Wager",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
),
Return = colDef(
name = "Return",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
),
Net = colDef(
name = "Net",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
),
theme = reactableTheme(
borderColor = "#dfe2e5",
stripedColor = "#f6f8fa",
highlightColor = "#f0f5f9",
cellPadding = "8px 12px",
style = list(fontFamily = "-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif")
)
)
)
reactable(
data,
defaultPageSize = 40,
defaultSorted = "Number",
columns = list(
Number = colDef(
name = "Number",
defaultSortOrder = "asc",
),
Date = colDef(
name = "Date",
format = colFormat(date = TRUE)
),
Bet = colDef(
name = "Bet",
defaultSortOrder = "desc",
format = colFormat(separators = TRUE)
),
Wager = colDef(
name = "Wager",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
),
Return = colDef(
name = "Return",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
),
Net = colDef(
name = "Net",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
),
theme = reactableTheme(
borderColor = "#dfe2e5",
stripedColor = "#f6f8fa",
highlightColor = "#f0f5f9",
cellPadding = "8px 12px",
style = list(fontFamily = "-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif")
)
)
)
reactable(
data,
defaultPageSize = 40,
borderColor = "#dfe2e5",v
defaultSorted = "Number",
columns = list(
Number = colDef(
name = "Number",
defaultSortOrder = "asc",
),
Date = colDef(
name = "Date",
format = colFormat(date = TRUE)
),
Bet = colDef(
name = "Bet",
defaultSortOrder = "desc",
format = colFormat(separators = TRUE)
),
Wager = colDef(
name = "Wager",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
),
Return = colDef(
name = "Return",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
),
Net = colDef(
name = "Net",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
)
)
)
reactable(
data,
defaultPageSize = 40,
borderColor = "#dfe2e5",
defaultSorted = "Number",
columns = list(
Number = colDef(
name = "Number",
defaultSortOrder = "asc",
),
Date = colDef(
name = "Date",
format = colFormat(date = TRUE)
),
Bet = colDef(
name = "Bet",
defaultSortOrder = "desc",
format = colFormat(separators = TRUE)
),
Wager = colDef(
name = "Wager",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
),
Return = colDef(
name = "Return",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
),
Net = colDef(
name = "Net",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
)
)
)
reactable(
data,
defaultPageSize = 40,
defaultSorted = "Number",
columns = list(
Number = colDef(
name = "Number",
defaultSortOrder = "asc",
),
Date = colDef(
name = "Date",
format = colFormat(date = TRUE)
),
Bet = colDef(
name = "Bet",
defaultSortOrder = "desc",
format = colFormat(separators = TRUE)
),
Wager = colDef(
name = "Wager",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
),
Return = colDef(
name = "Return",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
),
Net = colDef(
name = "Net",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
)
)
)
options(reactable.theme = reactableTheme(
color = "hsl(233, 9%, 87%)",
backgroundColor = "hsl(233, 9%, 19%)",
borderColor = "hsl(233, 9%, 22%)",
stripedColor = "hsl(233, 12%, 22%)",
highlightColor = "hsl(233, 12%, 24%)",
inputStyle = list(backgroundColor = "hsl(233, 9%, 25%)"),
selectStyle = list(backgroundColor = "hsl(233, 9%, 25%)"),
pageButtonHoverStyle = list(backgroundColor = "hsl(233, 9%, 25%)"),
pageButtonActiveStyle = list(backgroundColor = "hsl(233, 9%, 28%)")
))
library(tidyverse)
reactable(
data,
defaultPageSize = 40,
compact = TRUE,
borderless = FALSE,
striped = FALSE,
fullWidth = FALSE,
defaultSorted = "Number",
columns = list(
Number = colDef(
name = "Number",
defaultSortOrder = "asc",
),
Date = colDef(
name = "Date",
format = colFormat(date = TRUE)
),
Bet = colDef(
name = "Bet",
defaultSortOrder = "desc",
format = colFormat(separators = TRUE)
),
Wager = colDef(
name = "Wager",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
),
Return = colDef(
name = "Return",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
),
Net = colDef(
name = "Net",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
)
)
)
data <- read.csv("epl-bets.csv", stringsAsFactors = FALSE)
reactable(
data,
defaultPageSize = 40,
compact = TRUE,
borderless = FALSE,
striped = FALSE,
defaultSorted = "Number",
columns = list(
Number = colDef(
name = "Number",
defaultSortOrder = "asc",
),
Date = colDef(
name = "Date",
format = colFormat(date = TRUE)
),
Bet = colDef(
name = "Bet",
defaultSortOrder = "desc",
format = colFormat(separators = TRUE)
),
How = colDef(
name = "How",
html = TRUE,
),
Wager = colDef(
name = "Wager",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
),
Return = colDef(
name = "Return",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
),
Net = colDef(
name = "Net",
defaultSortOrder = "desc",
format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
)
)
)
library(htmltools)
hrbrthemes::import_roboto_condensed()
data.frame(
parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),
vals = c(10, 20, 30, 6, 14, 40, 30, 20, 10),
col = rep(c("blue", "black", "red"), 3),
fct = c(rep("Thing 1", 3),
rep("Thing 2", 3),
rep("Thing 3", 3))
) -> xdf
xdf %>%
count(parts, wt = vals) %>%
ggplot(aes(fill = parts, values = n)) +
geom_waffle(n_rows = 20, size = 0.33, colour = "white", flip = TRUE) +
scale_fill_manual(
name = NULL,
values = c("#a40000", "#c68958", "#ae6056"),
labels = c("Fruit", "Sammich", "Pizza")
) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
library(dplyr)
data.frame(
parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),
vals = c(10, 20, 30, 6, 14, 40, 30, 20, 10),
col = rep(c("blue", "black", "red"), 3),
fct = c(rep("Thing 1", 3),
rep("Thing 2", 3),
rep("Thing 3", 3))
) -> xdf
xdf %>%
count(parts, wt = vals) %>%
ggplot(aes(fill = parts, values = n)) +
geom_waffle(n_rows = 20, size = 0.33, colour = "white", flip = TRUE) +
scale_fill_manual(
name = NULL,
values = c("#a40000", "#c68958", "#ae6056"),
labels = c("Fruit", "Sammich", "Pizza")
) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
library(ggplot2)
data.frame(
parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),
vals = c(10, 20, 30, 6, 14, 40, 30, 20, 10),
col = rep(c("blue", "black", "red"), 3),
fct = c(rep("Thing 1", 3),
rep("Thing 2", 3),
rep("Thing 3", 3))
) -> xdf
xdf %>%
count(parts, wt = vals) %>%
ggplot(aes(fill = parts, values = n)) +
geom_waffle(n_rows = 20, size = 0.33, colour = "white", flip = TRUE) +
scale_fill_manual(
name = NULL,
values = c("#a40000", "#c68958", "#ae6056"),
labels = c("Fruit", "Sammich", "Pizza")
) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
library(waffle)
library(hrbrthemes)
data.frame(
parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),
vals = c(10, 20, 30, 6, 14, 40, 30, 20, 10),
col = rep(c("blue", "black", "red"), 3),
fct = c(rep("Thing 1", 3),
rep("Thing 2", 3),
rep("Thing 3", 3))
) -> xdf
xdf %>%
count(parts, wt = vals) %>%
ggplot(aes(fill = parts, values = n)) +
geom_waffle(n_rows = 20, size = 0.33, colour = "white", flip = TRUE) +
scale_fill_manual(
name = NULL,
values = c("#a40000", "#c68958", "#ae6056"),
labels = c("Fruit", "Sammich", "Pizza")
) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
library(waffle)
library(magrittr)
library(hrbrthemes)
library(ggplot2)
library(dplyr)
library(waffle)
data.frame(
parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),
vals = c(10, 20, 30, 6, 14, 40, 30, 20, 10),
col = rep(c("blue", "black", "red"), 3),
fct = c(rep("Thing 1", 3),
rep("Thing 2", 3),
rep("Thing 3", 3))
) -> xdf
xdf %>%
count(parts, wt = vals) %>%
ggplot(aes(fill = parts, values = n)) +
geom_waffle(n_rows = 20, size = 0.33, colour = "white", flip = TRUE) +
scale_fill_manual(
name = NULL,
values = c("#a40000", "#c68958", "#ae6056"),
labels = c("Fruit", "Sammich", "Pizza")
) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
devtools::install_github("hrbrmstr/waffle")
library(waffle)
xdf %>%
count(parts, wt = vals) %>%
ggplot(aes(label = parts, values = n)) +
geom_pictogram(n_rows = 10, aes(colour = parts), flip = TRUE, make_proportional = TRUE) +
scale_color_manual(
name = NULL,
values = c("#a40000", "#c68958", "#ae6056"),
labels = c("Fruit", "Sammich", "Pizza")
) +
scale_label_pictogram(
name = NULL,
values = c("apple-alt", "bread-slice", "pizza-slice"),
labels = c("Fruit", "Sammich", "Pizza")
) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle() +
theme(legend.key.height = unit(2.25, "line")) +
theme(legend.text = element_text(size = 10, hjust = 0, vjust = 0.75))
library(hrbrthemes)
library(waffle)
library(ggplot2)
library(dplyr)
xdf %>%
count(parts, wt = vals) %>%
ggplot(aes(label = parts, values = n)) +
geom_pictogram(n_rows = 10, aes(colour = parts), flip = TRUE, make_proportional = TRUE) +
scale_color_manual(
name = NULL,
values = c("#a40000", "#c68958", "#ae6056"),
labels = c("Fruit", "Sammich", "Pizza")
) +
scale_label_pictogram(
name = NULL,
values = c("apple-alt", "bread-slice", "pizza-slice"),
labels = c("Fruit", "Sammich", "Pizza")
) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle() +
theme(legend.key.height = unit(2.25, "line")) +
theme(legend.text = element_text(size = 10, hjust = 0, vjust = 0.75))
install_fa_fonts
packageVersion("waffle")
geom_pictogram
data.frame(
parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),
vals = c(10, 20, 30, 6, 14, 40, 30, 20, 10),
col = rep(c("blue", "black", "red"), 3),
fct = c(rep("Thing 1", 3),
rep("Thing 2", 3),
rep("Thing 3", 3))
) -> xdf
xdf %>%
count(parts, wt = vals) %>%
ggplot(aes(fill = parts, values = n)) +
geom_waffle(n_rows = 20, size = 0.33, colour = "white", flip = TRUE) +
scale_fill_manual(
name = NULL,
values = c("#a40000", "#c68958", "#ae6056"),
labels = c("Fruit", "Sammich", "Pizza")
) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(hrbrthemes)
library(waffle)
library(tidyverse)
tibble(
parts = factor(rep(month.abb[1:3], 3), levels=month.abb[1:3]),
values = c(10, 20, 30, 6, 14, 40, 30, 20, 10),
fct = c(rep("Thing 1", 3), rep("Thing 2", 3), rep("Thing 3", 3))
) -> xdf
ggplot(xdf, aes(fill=parts, values=values)) +
geom_waffle(color = "white", size=1.125, n_rows = 6) +
facet_wrap(~fct, ncol=1) +
scale_x_discrete(expand=c(0,0)) +
scale_y_discrete(expand=c(0,0)) +
ggthemes::scale_fill_tableau(name=NULL) +
coord_equal() +
labs(
title = "Faceted Waffle Geoms"
) +
theme_ipsum_rc(grid="") +
theme_enhance_waffle()
library(extrafont)
waffle(
parts / 10, rows = 3, colors = c("#969696", "#1879bf", "#009bda"),
use_glyph = "medkit", size = 8
) + expand_limits(y = c(0, 4))
library(waffle)
waffle(
parts / 10, rows = 3, colors = c("#969696", "#1879bf", "#009bda"),
use_glyph = "medkit", size = 8
) + expand_limits(y = c(0, 4))
library(waffle)
library(ggplot2)
library(hrbrthemes)
library(extrafont)
waffle(
parts / 10, rows = 3, colors = c("#969696", "#1879bf", "#009bda"),
use_glyph = "medkit", size = 8
) + expand_limits(y = c(0, 4))
parts <- c(`Un-breached\nUS Population` = (318 - 11 - 79), `Premera` = 11, `Anthem` = 79)
waffle(
parts / 10, rows = 3, colors = c("#969696", "#1879bf", "#009bda"),
use_glyph = "medkit", size = 8
) + expand_limits(y = c(0, 4))
devtools::install_github("rstudio/fontawesome")
library(fontawesome)
waffle(
parts / 10, rows = 3, colors = c("#969696", "#1879bf", "#009bda"),
use_glyph = "medkit", size = 8
) + expand_limits(y = c(0, 4))
install.packages("emojifont")
waffle(c(50, 30, 15, 5), rows = 5, use_glyph = "music", glyph_size = 4)
library("emojifont")
waffle(c(50, 30, 15, 5), rows = 5, use_glyph = "music", glyph_size = 4)
load.fontawesome(font = "fontawesome-webfont.ttf")
load.fontawesome(font = "fontawesome-webfont.otf")
waffle(c(50, 30, 15, 5), rows = 5, use_glyph = "music", glyph_size = 4)
search_emoji('smile')
setwd("~/Rblog/fungo/hugo-source/hugo-source")
blogdown::build_site()
blogdown::hugo_build()
blogdown::serve_site()
